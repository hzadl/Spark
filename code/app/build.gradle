apply plugin: 'com.android.application'

def stagingCertificate = 'application.jks'
def stagingCertPassword = 'heslo'

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "easepay.kfc.com.au.easepaykfc"
        minSdkVersion 15
        targetSdkVersion 15
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging {
            debuggable true
        }

        debug {
            debuggable true
        }
    }
}

repositories {
    mavenCentral()

    maven {
        url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.1'
    //compile 'net.gouline.droidxing:droidxing:0.1.1@aar'
    //compile 'com.embarkmobile:zxing-android-minimal:2.0.0@aar'

    // Convenience library to launch the scanning and encoding Activities.
    // It automatically picks the best scanning library from the above two, depending on the
    // Android version and what is available.
    //compile 'com.embarkmobile:zxing-android-integration:2.0.0@aar'

    // Version 3.0.x of zxing core contains some code that is not compatible on Android 2.2 and earlier.
    // This mostly affects encoding, but you should test if you plan to support these versions.
    // Older versions e.g. 2.2 may also work if you need support for older Android versions.
    //compile 'com.google.zxing:core:3.0.1'
    compile 'me.dm7.barcodescanner:zxing:1.8'
}

def getAdbPath() {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        return "$sdkDir/platform-tools/adb"
    }
    return ""
}

// Some Gradle magic to generate dynamic tasks for staging
afterEvaluate {
    def apkOutputDir = "build/outputs/apk"
    def adbPath = getAdbPath()
    android.applicationVariants.each { variant ->
        if (variant.buildType.name.equals("staging")) {
            def apkOutputFile = "${apkOutputDir}/ease_pay_kfc.apk"
            def variantOutput = variant.outputs[0].outputFile

            task("signAlbertStaging", type: Exec, dependsOn: variant.assemble) {
                description = 'Sign APK for Albert'
                group = 'Albert'
                commandLine "jarsigner", "-keystore", "$stagingCertificate", "-storepass", "$stagingCertPassword", "-digestalg", "SHA-256", "-sigalg", "MD5withRSA", "-signedjar", "$apkOutputFile", "$variantOutput", "application"
                println("jarsigner -keystore $stagingCertificate -storepass $stagingCertPassword -digestalg SHA-256 -sigalg MD5withRSA -signedjar $apkOutputFile $variantOutput application")
            }

            task("installAlbertStaging", type: Exec, dependsOn: "signAlbertStaging") {
                description = 'Install APK on Albert'
                group = 'Albert'
                commandLine "$adbPath", "install", "-r", "$apkOutputFile"
            }

            task("runAlbertStaging", type: Exec, dependsOn: "installAlbertStaging") {
                description = 'Run APK on Albert'
                group = 'Albert'
                commandLine "$adbPath", "shell", "am", "start", "-n", "easepay.kfc.com.au.easepaykfc/easepay.kfc.com.au.easepaykfc.MainActivity"
            }

            variant.outputsAreSigned = true
        }
    }
}